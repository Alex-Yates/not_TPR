/* Jenkinsfile (Declarative Pipeline) */
pipeline {
    agent {
         label "database_mgmt"
    }

    // This block is for parameters that users can set in the Jenkins UI at runtime.  
    parameters {
        string(name: 'BRANCH', defaultValue: 'refs/heads/master', description: 'The git branch to build')
        string(name: 'FLYWAYROOT', defaultValue: 'not_TPR_dev', description: 'The relative path from git root to the root of the Flyway project.')
    }
	
    // This block is for hard coding values that can only be altered by changing the source code
    environment {
        // Server and Instance names are set in the getServer() and getInstance() functions at the bottom of this script.
        SERVER = getServer(params.FLYWAYROOT)
        INSTANCE = getInstance(params.FLYWAYROOT)
        // Database name is assumed to be consistent across all environments. However, if it does change, it could be rewritten to use a function (like server/instance above).
        DATABASE = 'Not_TPR'
    }    		
	
    // The tasks that Jenkins will complete.
	stages {
        stage('Pre-deploy prep') {
            steps {
                // Verifies the existence of sp_generate_merge and the FlywaySchemaHistory table.
                powershell "./build/pre-deploy.ps1 -server ${SERVER} -instance ${INSTANCE} -database ${DATABASE} -flywayRoot ${params.FLYWAYROOT}"
            }
        }

        stage('Flyway migrate') {
            steps {
                // Executes the deployment, using flyway migrate
                withCredentials([string(credentialsId: 'Flyway_License_Key', variable: 'FLYWAY_LICENCE')]) {
					powershell "./build/migrate.ps1 -server ${SERVER} -instance ${INSTANCE} -database ${DATABASE} -flywayRoot ${params.FLYWAYROOT} -licenceKey ${FLYWAY_LICENCE}"
                }
			}
        }

        stage('Backup Flyway Schema History to git') {
            steps {
                // Uses sp_generage_merge to read the data in the flyway_schema_history table, and save a copy to source control.
                // We do this so that if the flyway_schema_history table is droped in production, we have all the data we need to rebuild it before our next deployment. 
                powershell "./build/update_fsh_data.ps1 -server ${SERVER} -instance ${INSTANCE} -database ${DATABASE} -flywayRoot ${params.FLYWAYROOT} -jobName ${env.JOB_NAME} -buildNumber ${env.BUILD_NUMBER} -buildUrl ${env.BUILD_URL} -branch ${params.BRANCH}"
            }
        }
    }
}

def getServer(flywayRoot) {
    switch (flywayRoot) {
        case 'DEV':
            return 'MY_DEV_SERVER'
        case 'PROD':
            return 'MY_PROD_SERVER'
        default:
            return 'UNKNOWN'
    }
}

def getInstance(flywayRoot) {
    switch (flywayRoot) {
        case 'DEV':
            return 'MSSQLSERVER'
        case 'PROD':
            return 'MSSQLSERVER'
        default:
            return 'UNKNOWN'
    }
}