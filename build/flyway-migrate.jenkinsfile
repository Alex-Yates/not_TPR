/* Jenkinsfile (Declarative Pipeline) */

CtaskNumber = ""

pipeline {
    
    agent {
         //label "${JenkinsAgent}"
         label "database_mgmt"
         //label "master"
    }
    
    //parameters {
        //string(name: 'BRANCH', defaultValue: 'refs/heads/master', description: 'The git branch to build')
        //string(name: 'SERVER', defaultValue: 'BRDVWSQL306', description: 'The SQL Server that you intend to deploy to.')
        //string(name: 'INSTANCE', defaultValue: 'MSSQLSERVER', description: 'The SQL Server Instance that you intend to deploy to.')
        //string(name: 'DATABASE', defaultValue: 'eSign_Automation_POC', description: 'The name of the database that needs to be deployed.')
        //string(name: 'FLYWAYROOT', defaultValue: 'Dev', description: 'The relative path from git root to the root of the Flyway project.')
        //choice(name: 'JenkinsAgent', choices: 'database_mgmt', description: 'Agent for executing DB scripts')
        //choice(name: 'JenkinsAgentLinux', choices: 'linux_deploy', description: 'Agent for executing Service-Now scripts')
        //choice(name: 'ChangeRequestNumber', description: 'Change Request Number')
    //}
    
    // Environment variables
    environment {
        JobName = "${BUILD_URL}"
        ExecutedBy = "${currentBuild.getBuildCauses()[0].userId}"
        
        // Use https://mercurytest.service-now.com for testing
        ServiceNowURL = "https://mercurytest.service-now.com"
        //ServiceNowURL = "https://mercury.service-now.com"
        
        ServiceNowAssignmentGroup ="SE+DBA+SQL"
        CtaskShortDescription = "SQL Flyway - Executed by Jenkins DBA automation"
        CtaskDescription = "Executed By: " + "${ExecutedBy}" + "\\r" +
                           "JobName: " + "${JobName}" + "\\r" +
                           "Flywayroot: " + "${FLYWAYROOT}"
    }
      
    stages {

        stage('Building sidecar') {
		agent { label "database_mgmt" }
            steps {
                // Verifies the existence of sp_generate_merge and the FlywaySchemaHistory table.
                powershell "./${params.BUILDROOT}/buildSideCar.ps1 -flywayRoot ${params.FLYWAYROOT}"
            }
            post { 
                failure { script { currentBuild.result = "FAILURE" } }
            } // post
        } // stage
        
        stage('Create CTASK') {
            agent { label JenkinsAgentLinux }
            steps {
                script {
                print "-------------------------------------"
                print "Create CTASK"
                print "-------------------------------------"
            
                withCredentials([usernamePassword(credentialsId: 'ServiceNow', passwordVariable: 'ServiceNowPassword', usernameVariable: 'ServiceNowUser')]) {
                withEnv([]) {
	            sh '''
	            #!/bin/bash
	            set +x
                ls -ltr
	            ChangeRequestNumber=${ChangeRequestNumber}
                ServiceNowURL=${ServiceNowURL}
                ServiceNowAssignmentGroup=${ServiceNowAssignmentGroup}
                CtaskShortDescription=${CtaskShortDescription}
                CtaskDescription=${CtaskDescription}
                
	            CtaskNumber=$(/mnt/cmbuilds/CMRepo/CMDeployScripts/serviceNowScripts/createCloseCtaskGeneral.sh "${ServiceNowUser}" \
                                                                                                                "${ServiceNowPassword}" \
                                                                                                                "${ServiceNowURL}" \
                                                                                                                "${ChangeRequestNumber}" \
                                                                                                                "${ServiceNowAssignmentGroup}" \
                                                                                                                "${CtaskShortDescription}" \
                                                                                                                "${CtaskDescription}")
        
                printf "$CtaskNumber" > CTASKNumber.txt
                '''
                } // withEnv
                } // withCredentials
                CtaskNumber = sh(script: "set +x; cat CTASKNumber.txt; set -x", returnStdout: true).trim()
                if (!CtaskNumber.contains('CTASK')) {
                    print "FAILURE: CTASK was not created."
                    currentBuild.result = "FAILURE"
                }
                else {
                    print "SUCCESS: " + CtaskNumber + " created successfully."
                }
                } // script  
            } // steps
        } // stage
        
        stage('Flyway migrate') {
            steps {
                // Executes the deployment, using flyway migrate
                withCredentials([string(credentialsId: 'Flyway_License_Key', variable: 'FLYWAY_LICENSE')]) {
					powershell """
if ( "${params.cherryPick}" -like "null" ) {
# cherrypick is null
./${params.BUILDROOT}/migrate.ps1 -flywayRoot ${params.FLYWAYROOT} -licenseKey ${FLYWAY_LICENSE}
}
else {
 # cherrypick is not null
./${params.BUILDROOT}/migrate.ps1 -flywayRoot ${params.FLYWAYROOT} -licenseKey ${FLYWAY_LICENSE} -cherryPick ${params.cherryPick}
 } 
"""
                }

            }
            post {
                failure { script { currentBuild.result = "FAILURE" } }
            } // post
        }

   } // stages 
    post {
        success {
            echo "Deployment complete | CTASK Closed | Send email"
            emailext body: "Jenkins build ${currentBuild.result}. Logs can be found at ${env.BUILD_URL}console",
            subject: "Jenkins Build - ${env.JOB_NAME} - ${currentBuild.result.capitalize()}",
            to: "SKRamani@mercuryinsurance.com",
			recipientProviders: [[$class: 'DevelopersRecipientProvider']]
        }
        failure {
            emailext body: "Jenkins build ${currentBuild.result}. Logs can be found at ${env.BUILD_URL}console",
            subject: "Jenkins Build - ${env.JOB_NAME} - ${currentBuild.result.capitalize()}",
            to: "SKRamani@mercuryinsurance.com",
			recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            
            script {
            if (CtaskNumber.contains('CTASK')) {
                node (JenkinsAgentLinux) {
                print "-------------------------------------"
                print "Update CTASK status to Closed Incomplete"
                print "-------------------------------------"
        
                withCredentials([usernamePassword(credentialsId: 'ServiceNow', passwordVariable: 'ServiceNowPassword', usernameVariable: 'ServiceNowUser')]) {
                withEnv(["CtaskNumber=$CtaskNumber","ServiceNowURL=$ServiceNowURL"]) {
	            sh '''
	            #!/bin/bash
	            set +x
	            CtaskUpdate=$(/mnt/cmbuilds/CMRepo/CMDeployScripts/serviceNowScripts/updateStatusCtask.sh "${ServiceNowUser}" \
	                                                                                                      "${ServiceNowPassword}" \
	                                                                                                      "${CtaskNumber}" \
	                                                                                                      "Closed_Incomplete" \
	                                                                                                      "${ServiceNowURL}")
                printf "$CtaskUpdate" > CTASKUpdate.txt
	            '''
                }
                }
                CtaskUpdate= sh(script: "set +x; cat CTASKUpdate.txt; set -x", returnStdout: true).trim()
                if (!CtaskUpdate.contains('Closed Incomplete')) {
                    print "FAILURE: CTASK state was not updated."
                    currentBuild.result = "FAILURE"
                }
                else {
                    print "SUCCESS: " + CtaskNumber + " was updated to Closed Incomplete due to job failure."
                }
                } // node
            } // end if
            } // script

        }
        unstable {
            echo "Deployment complete | CTASK Failed | Send email"
        }
    } // post
    
} // pipeline
